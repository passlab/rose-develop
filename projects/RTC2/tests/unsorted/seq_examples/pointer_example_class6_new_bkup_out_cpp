#include "foo2_c.h" 

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <stdint.h>
#include <map>
#define PTR_SIZE 100
#define PTR2_SIZE 10
#define PTR3_SIZE 10
#define OUT_OF_BOUNDS_EXCESS 1
#define LINKED_LIST_SIZE 10
#define ARRAY_SIZE 10
#if 0
//class Base* temp = new class Base[size];
#endif
//#include "decls.h"
#include "metadata.h"




struct __Pb__Cc__Pe___Type 
{
  const char *ptr;
  unsigned long long addr;
}
;

struct __Pb__Derived2__Pe___Type 
{
  class Derived2 *ptr;
  unsigned long long addr;
}
;

struct __Pb__Base__Pe___Type 
{
  class Base *ptr;
  unsigned long long addr;
}
;

struct __Pb__Derived1__Pe___Type 
{
  class Derived1 *ptr;
  unsigned long long addr;
}
;

struct __Pb__f__Pe___Type 
{
  float *ptr;
  unsigned long long addr;
}
;


struct __Pb__i__Pe___Type 
{
  int *ptr;
  unsigned long long addr;
}
;

#if 0
struct __Pb__v__Pe___Type 
{
  void *ptr;
  unsigned long long addr;
}
;
#endif

struct __Pb__node__Pe___Type 
{
  struct node *ptr;
  unsigned long long addr;
}
;
#if 0
//--------------------------------
struct MetaData {
    uint64_t L;
    uint64_t H;
    uint64_t lock_loc;
    uint64_t key;
};

typedef std::map<uint64_t, struct MetaData> MetaMap;
MetaMap TrackingDB;

uint64_t find_lock(unsigned long long base) {
    // Some number
    return 0;
}

uint64_t find_key(uint64_t lock_loc) {
    // Some number
    return 0;
}

bool isValidEntry(unsigned long long addr) {
    MetaMap::iterator iter = TrackingDB.find(addr);

    return (iter != TrackingDB.end()); 
}

void v_Ret_create_entry_UL_Arg_UL_Arg(unsigned long long dest,unsigned long long src) {

    assert(isValidEntry(src));
    
    TrackingDB[dest] = TrackingDB[src];
}


void v_Ret_create_entry_UL_Arg_UL_Arg_Ul_Arg(unsigned long long addr,unsigned long long base,unsigned long size) {
    
    struct MetaData md;
    md.L = base;
    md.H = base + size;
    md.lock_loc = find_lock(base);
    md.key = find_key(md.lock_loc);

    TrackingDB[addr] = md;
}

struct __Pb__v__Pe___Type __Pb__v__Pe___Type_Ret_malloc_overload_Ul_Arg(unsigned long size) {
    struct __Pb__v__Pe___Type output;
    output.ptr = malloc(size);
    output.addr = reinterpret_cast<unsigned long long>(&output.ptr);
    v_Ret_create_entry_UL_Arg_UL_Arg_Ul_Arg(output.addr, reinterpret_cast<unsigned long long>(output.ptr), size);
    #ifdef DEBUG    
    printf("malloc overload\n");
    printf("output.ptr: %llu, output.addr: %llu\n", reinterpret_cast<unsigned long long>(output.ptr),
                                                    output.addr);
    #endif
    return output;
}

void v_Ret_free_overload___Pb__v__Pe___Type_Arg(struct __Pb__v__Pe___Type input) {
    free(input.ptr);
}
//------------------------------
#endif


#if 0
void v_Ret_create_entry_UL_Arg_UL_Arg(unsigned long long i1,unsigned long long i2) {}
struct __Pb__v__Pe___Type __Pb__v__Pe___Type_Ret_malloc_overload_Ul_Arg(unsigned long i1) {}
void v_Ret_create_entry_UL_Arg_UL_Arg_Ul_Arg(unsigned long long i1,unsigned long long i2,unsigned long i3) {}
void v_Ret_free_overload___Pb__v__Pe___Type_Arg(struct __Pb__v__Pe___Type i1) {}
#endif

bool b_Ret_Equality___Pb__node__Pe___Type_Arg___Pb__node__Pe___Type_Arg(struct __Pb__node__Pe___Type input1,struct __Pb__node__Pe___Type input2)
{
  return input1.__Pb__node__Pe___Type::ptr == input2.__Pb__node__Pe___Type::ptr;
}

struct __Pb__Cc__Pe___Type __Pb__Cc__Pe___Type_Ret_create_struct___Pb__Cc__Pe___Arg_UL_Arg_Ul_Arg(const char *input1,unsigned long long input2,unsigned long input3)
{
  struct __Pb__Cc__Pe___Type output;
  output.__Pb__Cc__Pe___Type::ptr = input1;
  output.__Pb__Cc__Pe___Type::addr = input2;
  v_Ret_create_entry_UL_Arg_UL_Arg_Ul_Arg(input2,(reinterpret_cast < unsigned long long  >  (input1)),((unsigned long )input3));
  return output;
}


struct __Pb__i__Pe___Type __Pb__i__Pe___Type_Ret_Increment___Pb____Pb__i__Pe___Type__Pe___Arg(struct __Pb__i__Pe___Type *input1)
{
  ++input1 -> __Pb__i__Pe___Type::ptr;
  return  *input1;
}

struct __Pb__f__Pe___Type __Pb__f__Pe___Type_Ret_Cast___Pb__i__Pe___Type_Arg(struct __Pb__i__Pe___Type input1)
{
  struct __Pb__f__Pe___Type output;
  output.__Pb__f__Pe___Type::ptr = (reinterpret_cast < float * >  (input1.__Pb__i__Pe___Type::ptr));
  output.__Pb__f__Pe___Type::addr = input1.__Pb__i__Pe___Type::addr;
  return output;
}

struct __Pb__i__Pe___Type __Pb__i__Pe___Type_Ret_create_struct___Pb__i__Pe___Arg_UL_Arg(int *input1,unsigned long long input2)
{
  struct __Pb__i__Pe___Type output;
  output.__Pb__i__Pe___Type::ptr = input1;
  output.__Pb__i__Pe___Type::addr = input2;
  return output;
}

struct __Pb__Derived2__Pe___Type __Pb__Derived2__Pe___Type_Ret_Cast___Pb__Base__Pe___Type_Arg(struct __Pb__Base__Pe___Type input1)
{
  struct __Pb__Derived2__Pe___Type output;
  output.__Pb__Derived2__Pe___Type::ptr = (reinterpret_cast < class Derived2 * >  (input1.__Pb__Base__Pe___Type::ptr));
  output.__Pb__Derived2__Pe___Type::addr = input1.__Pb__Base__Pe___Type::addr;
  return output;
}

struct __Pb__Derived2__Pe___Type __Pb__Derived2__Pe___Type_Ret_create_struct___Pb__Derived2__Pe___Arg_UL_Arg(class Derived2 *input1,unsigned long long input2)
{
  struct __Pb__Derived2__Pe___Type output;
  output.__Pb__Derived2__Pe___Type::ptr = input1;
  output.__Pb__Derived2__Pe___Type::addr = input2;
  return output;
}

struct __Pb__Derived2__Pe___Type __Pb__Derived2__Pe___Type_Ret_Assign___Pb____Pb__Derived2__Pe___Type__Pe___Arg___Pb__Derived2__Pe___Type_Arg(struct __Pb__Derived2__Pe___Type *input1,struct __Pb__Derived2__Pe___Type input2)
{
  input1 -> __Pb__Derived2__Pe___Type::ptr = input2.__Pb__Derived2__Pe___Type::ptr;
  v_Ret_create_entry_UL_Arg_UL_Arg(input1 -> __Pb__Derived2__Pe___Type::addr,input2.__Pb__Derived2__Pe___Type::addr);
  return  *input1;
}

struct __Pb__Derived2__Pe___Type __Pb__Derived2__Pe___Type_Ret_Cast___Pb__v__Pe___Type_Arg(struct __Pb__v__Pe___Type input1)
{
  struct __Pb__Derived2__Pe___Type output;
  output.__Pb__Derived2__Pe___Type::ptr = (reinterpret_cast < class Derived2 * >  (input1.__Pb__v__Pe___Type::ptr));
  output.__Pb__Derived2__Pe___Type::addr = input1.__Pb__v__Pe___Type::addr;
  return output;
}

class Derived1 *__Pb__Derived1__Pe___Ret_Deref___Pb__Derived1__Pe___Type_Arg(struct __Pb__Derived1__Pe___Type input1)
{
  return input1.__Pb__Derived1__Pe___Type::ptr;
}

struct __Pb__Derived1__Pe___Type __Pb__Derived1__Pe___Type_Ret_Cast___Pb__Base__Pe___Type_Arg(struct __Pb__Base__Pe___Type input1)
{
  struct __Pb__Derived1__Pe___Type output;
  output.__Pb__Derived1__Pe___Type::ptr = (reinterpret_cast < class Derived1 * >  (input1.__Pb__Base__Pe___Type::ptr));
  output.__Pb__Derived1__Pe___Type::addr = input1.__Pb__Base__Pe___Type::addr;
  return output;
}


struct __Pb__Derived1__Pe___Type __Pb__Derived1__Pe___Type_Ret_AddressOf_UL_Arg_Ui_Arg(unsigned long long input1,unsigned int input2)
{
  struct __Pb__Derived1__Pe___Type output;
  output.__Pb__Derived1__Pe___Type::ptr = (reinterpret_cast < class Derived1 * >  (input1));
  output.__Pb__Derived1__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&output.__Pb__Derived1__Pe___Type::ptr)));
  v_Ret_create_entry_UL_Arg_UL_Arg_Ul_Arg(output.__Pb__Derived1__Pe___Type::addr,(reinterpret_cast < unsigned long long  >  (output.__Pb__Derived1__Pe___Type::ptr)),((unsigned long )input2));
  return output;
}

struct __Pb__Base__Pe___Type __Pb__Base__Pe___Type_Ret_Cast___Pb__v__Pe___Type_Arg(struct __Pb__v__Pe___Type input1)
{
  struct __Pb__Base__Pe___Type output;
  output.__Pb__Base__Pe___Type::ptr = (reinterpret_cast < class Base * >  (input1.__Pb__v__Pe___Type::ptr));
  output.__Pb__Base__Pe___Type::addr = input1.__Pb__v__Pe___Type::addr;
  return output;
}

struct __Pb__i__Pe___Type __Pb__i__Pe___Type_Ret_Assign___Pb____Pb__i__Pe___Type__Pe___Arg___Pb__i__Pe___Type_Arg(struct __Pb__i__Pe___Type *input1,struct __Pb__i__Pe___Type input2)
{
  input1 -> __Pb__i__Pe___Type::ptr = input2.__Pb__i__Pe___Type::ptr;
  v_Ret_create_entry_UL_Arg_UL_Arg(input1 -> __Pb__i__Pe___Type::addr,input2.__Pb__i__Pe___Type::addr);
  return  *input1;
}

struct __Pb__i__Pe___Type __Pb__i__Pe___Type_Ret_Cast___Pb__v__Pe___Type_Arg(struct __Pb__v__Pe___Type input1)
{
  struct __Pb__i__Pe___Type output;
  output.__Pb__i__Pe___Type::ptr = (reinterpret_cast < int * >  (input1.__Pb__v__Pe___Type::ptr));
  output.__Pb__i__Pe___Type::addr = input1.__Pb__v__Pe___Type::addr;
  return output;
}

struct node *__Pb__node__Pe___Ret_PntrArrRef___Pb__node__Pe___Type_Arg_Ui_Arg(struct __Pb__node__Pe___Type input1,unsigned int input2)
{
  return input1.__Pb__node__Pe___Type::ptr + input2;
}

bool b_Ret_NotEqual___Pb__node__Pe___Type_Arg___Pb__node__Pe___Type_Arg(struct __Pb__node__Pe___Type input1,struct __Pb__node__Pe___Type input2)
{
  return input1.__Pb__node__Pe___Type::ptr != input2.__Pb__node__Pe___Type::ptr;
}

class Base *__Pb__Base__Pe___Ret_Deref___Pb__Base__Pe___Type_Arg(struct __Pb__Base__Pe___Type input1)
{
  return input1.__Pb__Base__Pe___Type::ptr;
}

struct __Pb__node__Pe___Type __Pb__node__Pe___Type_Ret_Add___Pb__node__Pe___Type_Arg_Ui_Arg(struct __Pb__node__Pe___Type input1,unsigned int input2)
{
  input1.__Pb__node__Pe___Type::ptr += input2;
  return input1;
}

struct __Pb__v__Pe___Type __Pb__v__Pe___Type_Ret_Cast___Pb__node__Pe___Type_Arg(struct __Pb__node__Pe___Type input1)
{
  struct __Pb__v__Pe___Type output;
  output.__Pb__v__Pe___Type::ptr = (reinterpret_cast < void * >  (input1.__Pb__node__Pe___Type::ptr));
  output.__Pb__v__Pe___Type::addr = input1.__Pb__node__Pe___Type::addr;
  return output;
}


struct __Pb__v__Pe___Type __Pb__v__Pe___Type_Ret_Cast___Pb__Base__Pe___Type_Arg(struct __Pb__Base__Pe___Type input1)
{
  struct __Pb__v__Pe___Type output;
  output.__Pb__v__Pe___Type::ptr = (reinterpret_cast < void * >  (input1.__Pb__Base__Pe___Type::ptr));
  output.__Pb__v__Pe___Type::addr = input1.__Pb__Base__Pe___Type::addr;
  return output;
}

struct __Pb__node__Pe___Type __Pb__node__Pe___Type_Ret_Cast_i_Arg(int input1)
{
  struct __Pb__node__Pe___Type output;
  output.__Pb__node__Pe___Type::ptr = (reinterpret_cast < struct node * >  (input1));
  output.__Pb__node__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&output.__Pb__node__Pe___Type::ptr)));
  return output;
}

struct __Pb__Base__Pe___Type __Pb__Base__Pe___Type_Ret_Assign___Pb____Pb__Base__Pe___Type__Pe___Arg___Pb__Base__Pe___Type_Arg(struct __Pb__Base__Pe___Type *input1,struct __Pb__Base__Pe___Type input2)
{
  input1 -> __Pb__Base__Pe___Type::ptr = input2.__Pb__Base__Pe___Type::ptr;
  v_Ret_create_entry_UL_Arg_UL_Arg(input1 -> __Pb__Base__Pe___Type::addr,input2.__Pb__Base__Pe___Type::addr);
  return  *input1;
}

struct __Pb__Base__Pe___Type __Pb__Base__Pe___Type_Ret_create_struct___Pb__Base__Pe___Arg_UL_Arg(class Base *input1,unsigned long long input2)
{
  struct __Pb__Base__Pe___Type output;
  output.__Pb__Base__Pe___Type::ptr = input1;
  output.__Pb__Base__Pe___Type::addr = input2;
  return output;
}

struct node *__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(struct __Pb__node__Pe___Type input1)
{
  return input1.__Pb__node__Pe___Type::ptr;
}

struct __Pb__node__Pe___Type __Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(struct node *input1,unsigned long long input2)
{
  struct __Pb__node__Pe___Type output;
  output.__Pb__node__Pe___Type::ptr = input1;
  output.__Pb__node__Pe___Type::addr = input2;
  return output;
}

struct __Pb__node__Pe___Type __Pb__node__Pe___Type_Ret_Assign___Pb____Pb__node__Pe___Type__Pe___Arg___Pb__node__Pe___Type_Arg(struct __Pb__node__Pe___Type *input1,struct __Pb__node__Pe___Type input2)
{
  input1 -> __Pb__node__Pe___Type::ptr = input2.__Pb__node__Pe___Type::ptr;
  v_Ret_create_entry_UL_Arg_UL_Arg(input1 -> __Pb__node__Pe___Type::addr,input2.__Pb__node__Pe___Type::addr);
  return  *input1;
}

struct __Pb__node__Pe___Type __Pb__node__Pe___Type_Ret_Cast___Pb__v__Pe___Type_Arg(struct __Pb__v__Pe___Type input1)
{
  struct __Pb__node__Pe___Type output;
  output.__Pb__node__Pe___Type::ptr = (reinterpret_cast < struct node * >  (input1.__Pb__v__Pe___Type::ptr));
  output.__Pb__node__Pe___Type::addr = input1.__Pb__v__Pe___Type::addr;
  return output;
}

struct __Pb__Base__Pe___Type __Pb__Base__Pe___Type_Ret_Cast___Pb__Derived1__Pe___Type_Arg(struct __Pb__Derived1__Pe___Type input1)
{
  struct __Pb__Base__Pe___Type output;
  output.__Pb__Base__Pe___Type::ptr = (reinterpret_cast < class Base * >  (input1.__Pb__Derived1__Pe___Type::ptr));
  output.__Pb__Base__Pe___Type::addr = input1.__Pb__Derived1__Pe___Type::addr;
  return output;
}

struct __Pb__Derived1__Pe___Type __Pb__Derived1__Pe___Type_Ret_Cast___Pb__Derived2__Pe___Type_Arg(struct __Pb__Derived2__Pe___Type input1)
{
  struct __Pb__Derived1__Pe___Type output;
  output.__Pb__Derived1__Pe___Type::ptr = (reinterpret_cast < class Derived1 * >  (input1.__Pb__Derived2__Pe___Type::ptr));
  output.__Pb__Derived1__Pe___Type::addr = input1.__Pb__Derived2__Pe___Type::addr;
  return output;
}

int *__Pb__i__Pe___Ret_Deref___Pb__i__Pe___Type_Arg(struct __Pb__i__Pe___Type input1)
{
  return input1.__Pb__i__Pe___Type::ptr;
}

class Derived2 *__Pb__Derived2__Pe___Ret_Deref___Pb__Derived2__Pe___Type_Arg(struct __Pb__Derived2__Pe___Type input1)
{
  return input1.__Pb__Derived2__Pe___Type::ptr;
}


struct User{
    float* user_ptr1;
};

class Base{
    unsigned int *ptr1;
    unsigned int *ptr2;
    unsigned int var1;
    char var2;
    float var3;
    float* ptr3;
    unsigned int *ptr4;
    struct User *str_ptr1;
    public:
    virtual void print() {
        int* print_ptr1;
        printf("This is base class\n");
    }

    virtual void set_var1(unsigned int val) {
        var1 = val;
    }

    unsigned int get_var1() {
        return var1;
    }
};

class Derived1 : public Base {
    unsigned int* der1_ptr1;
    float* der1_ptr2;
    public:
    void print() {
        int* print_ptr1;
        printf("This is Derived1 class\n");
    }
};

class Derived2 : public Derived1 {
    unsigned int* der2_ptr1;
    float* der2_ptr2;
    class Base* der2_base_ptr1;
    class Derived1 der2_der1_obj;
    public:
    void print() {
        int* print_ptr1;
        printf("This is Derived2 class\n");
    }

    void set_base_ptr(unsigned int size) {

        //class Base* temp = new class Base[size];
        class Base* temp = (class Base*)malloc(size*sizeof(class Base));
        
        der2_base_ptr1 = &temp[size-1]; 
    }

    void set_two_pointers(unsigned int size) {

        der2_ptr1 = (unsigned int*)malloc(size*sizeof(unsigned int));

        der2_ptr2 = (float*)der2_ptr1++;

        set_base_ptr(size*2);

    }


};

struct node {
    class Base* base_ptr;
    unsigned int node_ctr;
    struct node* next;
    struct node* prev;
};



class Base fn2(struct __Pb__i__Pe___Type input1_str,struct __Pb__f__Pe___Type input2_str,struct __Pb__Derived1__Pe___Type input3_str,struct __Pb__Derived1__Pe___Type input4_str,class Base input5,struct __Pb__Base__Pe___Type input6_str)
{
  (v_Ret_create_entry_UL_Arg_UL_Arg((reinterpret_cast < unsigned long long  >  ((&input6_str.__Pb__Base__Pe___Type::ptr))),input6_str.__Pb__Base__Pe___Type::addr) , input6_str.__Pb__Base__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&input6_str.__Pb__Base__Pe___Type::ptr))));
  (v_Ret_create_entry_UL_Arg_UL_Arg((reinterpret_cast < unsigned long long  >  ((&input4_str.__Pb__Derived1__Pe___Type::ptr))),input4_str.__Pb__Derived1__Pe___Type::addr) , input4_str.__Pb__Derived1__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&input4_str.__Pb__Derived1__Pe___Type::ptr))));
  (v_Ret_create_entry_UL_Arg_UL_Arg((reinterpret_cast < unsigned long long  >  ((&input3_str.__Pb__Derived1__Pe___Type::ptr))),input3_str.__Pb__Derived1__Pe___Type::addr) , input3_str.__Pb__Derived1__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&input3_str.__Pb__Derived1__Pe___Type::ptr))));
  (v_Ret_create_entry_UL_Arg_UL_Arg((reinterpret_cast < unsigned long long  >  ((&input2_str.__Pb__f__Pe___Type::ptr))),input2_str.__Pb__f__Pe___Type::addr) , input2_str.__Pb__f__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&input2_str.__Pb__f__Pe___Type::ptr))));
  (v_Ret_create_entry_UL_Arg_UL_Arg((reinterpret_cast < unsigned long long  >  ((&input1_str.__Pb__i__Pe___Type::ptr))),input1_str.__Pb__i__Pe___Type::addr) , input1_str.__Pb__i__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&input1_str.__Pb__i__Pe___Type::ptr))));
  return (input5);
}

struct __Pb__Base__Pe___Type fn1(struct __Pb__i__Pe___Type input1_str,char input4,struct __Pb__f__Pe___Type input2_str,struct __Pb__Derived2__Pe___Type input3_str,class Base input5)
{
  (v_Ret_create_entry_UL_Arg_UL_Arg((reinterpret_cast < unsigned long long  >  ((&input3_str.__Pb__Derived2__Pe___Type::ptr))),input3_str.__Pb__Derived2__Pe___Type::addr) , input3_str.__Pb__Derived2__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&input3_str.__Pb__Derived2__Pe___Type::ptr))));
  (v_Ret_create_entry_UL_Arg_UL_Arg((reinterpret_cast < unsigned long long  >  ((&input2_str.__Pb__f__Pe___Type::ptr))),input2_str.__Pb__f__Pe___Type::addr) , input2_str.__Pb__f__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&input2_str.__Pb__f__Pe___Type::ptr))));
  (v_Ret_create_entry_UL_Arg_UL_Arg((reinterpret_cast < unsigned long long  >  ((&input1_str.__Pb__i__Pe___Type::ptr))),input1_str.__Pb__i__Pe___Type::addr) , input1_str.__Pb__i__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&input1_str.__Pb__i__Pe___Type::ptr))));
  __Pb__Derived2__Pe___Ret_Deref___Pb__Derived2__Pe___Type_Arg(input3_str) ->  set_two_pointers (( *__Pb__i__Pe___Ret_Deref___Pb__i__Pe___Type_Arg(input1_str)));
  return __Pb__Base__Pe___Type_Ret_Cast___Pb__Derived1__Pe___Type_Arg(__Pb__Derived1__Pe___Type_Ret_Cast___Pb__Derived2__Pe___Type_Arg(input3_str));
}

struct __Pb__node__Pe___Type insert_node(struct __Pb__Base__Pe___Type ptr_str,struct __Pb__node__Pe___Type pos_str)
{
//struct node* new_node = new struct node;
  (v_Ret_create_entry_UL_Arg_UL_Arg((reinterpret_cast < unsigned long long  >  ((&pos_str.__Pb__node__Pe___Type::ptr))),pos_str.__Pb__node__Pe___Type::addr) , pos_str.__Pb__node__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&pos_str.__Pb__node__Pe___Type::ptr))));
  (v_Ret_create_entry_UL_Arg_UL_Arg((reinterpret_cast < unsigned long long  >  ((&ptr_str.__Pb__Base__Pe___Type::ptr))),ptr_str.__Pb__Base__Pe___Type::addr) , ptr_str.__Pb__Base__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&ptr_str.__Pb__Base__Pe___Type::ptr))));
  struct node *new_node;
  struct __Pb__node__Pe___Type new_node_str;
  ((new_node_str.__Pb__node__Pe___Type::ptr = new_node , new_node_str.__Pb__node__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&new_node)))) , ((__Pb__node__Pe___Type_Ret_Assign___Pb____Pb__node__Pe___Type__Pe___Arg___Pb__node__Pe___Type_Arg(&new_node_str,__Pb__node__Pe___Type_Ret_Cast___Pb__v__Pe___Type_Arg(__Pb__v__Pe___Type_Ret_malloc_overload_Ul_Arg(32UL))) , new_node = new_node_str.__Pb__node__Pe___Type::ptr)));
  struct __Pb__Base__Pe___Type __Pb__Base__Pe___Type_Var_ovl_0;
  (((__Pb__Base__Pe___Type_Var_ovl_0 = __Pb__Base__Pe___Type_Ret_create_struct___Pb__Base__Pe___Arg_UL_Arg(__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(new_node,(reinterpret_cast < unsigned long long  >  ((&new_node))))) -> node::base_ptr,(reinterpret_cast < unsigned long long  >  ((&__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(new_node,(reinterpret_cast < unsigned long long  >  ((&new_node))))) -> node::base_ptr)))) , __Pb__Base__Pe___Type_Ret_Assign___Pb____Pb__Base__Pe___Type__Pe___Arg___Pb__Base__Pe___Type_Arg(&__Pb__Base__Pe___Type_Var_ovl_0,ptr_str)) ,  *(reinterpret_cast < class Base ** >  (__Pb__Base__Pe___Type_Var_ovl_0.__Pb__Base__Pe___Type::addr)) = __Pb__Base__Pe___Type_Var_ovl_0.__Pb__Base__Pe___Type::ptr) , __Pb__Base__Pe___Type_Var_ovl_0);
  __Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(new_node,(reinterpret_cast < unsigned long long  >  ((&new_node))))) -> node::node_ctr = ++__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(pos_str) -> node::node_ctr;
  struct __Pb__node__Pe___Type __Pb__node__Pe___Type_Var_ovl_1;
  (((__Pb__node__Pe___Type_Var_ovl_1 = __Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(new_node,(reinterpret_cast < unsigned long long  >  ((&new_node))))) -> node::next,(reinterpret_cast < unsigned long long  >  ((&__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(new_node,(reinterpret_cast < unsigned long long  >  ((&new_node))))) -> node::next)))) , __Pb__node__Pe___Type_Ret_Assign___Pb____Pb__node__Pe___Type__Pe___Arg___Pb__node__Pe___Type_Arg(&__Pb__node__Pe___Type_Var_ovl_1,__Pb__node__Pe___Type_Ret_Cast_i_Arg(0))) ,  *(reinterpret_cast < struct node ** >  (__Pb__node__Pe___Type_Var_ovl_1.__Pb__node__Pe___Type::addr)) = __Pb__node__Pe___Type_Var_ovl_1.__Pb__node__Pe___Type::ptr) , __Pb__node__Pe___Type_Var_ovl_1);
  struct __Pb__node__Pe___Type __Pb__node__Pe___Type_Var_ovl_2;
  (((__Pb__node__Pe___Type_Var_ovl_2 = __Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(new_node,(reinterpret_cast < unsigned long long  >  ((&new_node))))) -> node::prev,(reinterpret_cast < unsigned long long  >  ((&__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(new_node,(reinterpret_cast < unsigned long long  >  ((&new_node))))) -> node::prev)))) , __Pb__node__Pe___Type_Ret_Assign___Pb____Pb__node__Pe___Type__Pe___Arg___Pb__node__Pe___Type_Arg(&__Pb__node__Pe___Type_Var_ovl_2,pos_str)) ,  *(reinterpret_cast < struct node ** >  (__Pb__node__Pe___Type_Var_ovl_2.__Pb__node__Pe___Type::addr)) = __Pb__node__Pe___Type_Var_ovl_2.__Pb__node__Pe___Type::ptr) , __Pb__node__Pe___Type_Var_ovl_2);
  struct __Pb__node__Pe___Type __Pb__node__Pe___Type_Var_ovl_3;
  (((__Pb__node__Pe___Type_Var_ovl_3 = __Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(pos_str) -> node::next,(reinterpret_cast < unsigned long long  >  ((&__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(pos_str) -> node::next)))) , __Pb__node__Pe___Type_Ret_Assign___Pb____Pb__node__Pe___Type__Pe___Arg___Pb__node__Pe___Type_Arg(&__Pb__node__Pe___Type_Var_ovl_3,__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(new_node,(reinterpret_cast < unsigned long long  >  ((&new_node)))))) ,  *(reinterpret_cast < struct node ** >  (__Pb__node__Pe___Type_Var_ovl_3.__Pb__node__Pe___Type::addr)) = __Pb__node__Pe___Type_Var_ovl_3.__Pb__node__Pe___Type::ptr) , __Pb__node__Pe___Type_Var_ovl_3);
  return __Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(new_node,(reinterpret_cast < unsigned long long  >  ((&new_node))));
}

struct __Pb__node__Pe___Type delete_node(struct __Pb__node__Pe___Type pos_str)
{
  (v_Ret_create_entry_UL_Arg_UL_Arg((reinterpret_cast < unsigned long long  >  ((&pos_str.__Pb__node__Pe___Type::ptr))),pos_str.__Pb__node__Pe___Type::addr) , pos_str.__Pb__node__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&pos_str.__Pb__node__Pe___Type::ptr))));
  struct node *prev;
  struct __Pb__node__Pe___Type prev_str;
  ((prev_str.__Pb__node__Pe___Type::ptr = prev , prev_str.__Pb__node__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&prev)))) , ((__Pb__node__Pe___Type_Ret_Assign___Pb____Pb__node__Pe___Type__Pe___Arg___Pb__node__Pe___Type_Arg(&prev_str,__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(pos_str) -> node::prev,(reinterpret_cast < unsigned long long  >  ((&__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(pos_str) -> node::prev))))) , prev = prev_str.__Pb__node__Pe___Type::ptr)));
  struct node *next;
  struct __Pb__node__Pe___Type next_str;
  ((next_str.__Pb__node__Pe___Type::ptr = next , next_str.__Pb__node__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&next)))) , ((__Pb__node__Pe___Type_Ret_Assign___Pb____Pb__node__Pe___Type__Pe___Arg___Pb__node__Pe___Type_Arg(&next_str,__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(pos_str) -> node::next,(reinterpret_cast < unsigned long long  >  ((&__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(pos_str) -> node::next))))) , next = next_str.__Pb__node__Pe___Type::ptr)));
  struct __Pb__node__Pe___Type __Pb__node__Pe___Type_Var_ovl_4;
  (((__Pb__node__Pe___Type_Var_ovl_4 = __Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(prev,(reinterpret_cast < unsigned long long  >  ((&prev))))) -> node::next,(reinterpret_cast < unsigned long long  >  ((&__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(prev,(reinterpret_cast < unsigned long long  >  ((&prev))))) -> node::next)))) , __Pb__node__Pe___Type_Ret_Assign___Pb____Pb__node__Pe___Type__Pe___Arg___Pb__node__Pe___Type_Arg(&__Pb__node__Pe___Type_Var_ovl_4,__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(next,(reinterpret_cast < unsigned long long  >  ((&next)))))) ,  *(reinterpret_cast < struct node ** >  (__Pb__node__Pe___Type_Var_ovl_4.__Pb__node__Pe___Type::addr)) = __Pb__node__Pe___Type_Var_ovl_4.__Pb__node__Pe___Type::ptr) , __Pb__node__Pe___Type_Var_ovl_4);
  struct __Pb__node__Pe___Type __Pb__node__Pe___Type_Var_ovl_5;
  (((__Pb__node__Pe___Type_Var_ovl_5 = __Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(next,(reinterpret_cast < unsigned long long  >  ((&next))))) -> node::prev,(reinterpret_cast < unsigned long long  >  ((&__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(next,(reinterpret_cast < unsigned long long  >  ((&next))))) -> node::prev)))) , __Pb__node__Pe___Type_Ret_Assign___Pb____Pb__node__Pe___Type__Pe___Arg___Pb__node__Pe___Type_Arg(&__Pb__node__Pe___Type_Var_ovl_5,__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(prev,(reinterpret_cast < unsigned long long  >  ((&prev)))))) ,  *(reinterpret_cast < struct node ** >  (__Pb__node__Pe___Type_Var_ovl_5.__Pb__node__Pe___Type::addr)) = __Pb__node__Pe___Type_Var_ovl_5.__Pb__node__Pe___Type::ptr) , __Pb__node__Pe___Type_Var_ovl_5);
  v_Ret_free_overload___Pb__v__Pe___Type_Arg(__Pb__v__Pe___Type_Ret_Cast___Pb__Base__Pe___Type_Arg(__Pb__Base__Pe___Type_Ret_create_struct___Pb__Base__Pe___Arg_UL_Arg(__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(pos_str) -> node::base_ptr,(reinterpret_cast < unsigned long long  >  ((&__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(pos_str) -> node::base_ptr))))));
  v_Ret_free_overload___Pb__v__Pe___Type_Arg(__Pb__v__Pe___Type_Ret_Cast___Pb__node__Pe___Type_Arg(pos_str));
  return __Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(prev,(reinterpret_cast < unsigned long long  >  ((&prev))));
}
#if 1

void fn3(struct __Pb__node__Pe___Type array_str)
{
  (v_Ret_create_entry_UL_Arg_UL_Arg((reinterpret_cast < unsigned long long  >  ((&array_str.__Pb__node__Pe___Type::ptr))),array_str.__Pb__node__Pe___Type::addr) , array_str.__Pb__node__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&array_str.__Pb__node__Pe___Type::ptr))));
  for (unsigned int index = 0U; index < 10U; index++) {
    struct node *element;
    struct __Pb__node__Pe___Type element_str;
    ((element_str.__Pb__node__Pe___Type::ptr = element , element_str.__Pb__node__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&element)))) , ((__Pb__node__Pe___Type_Ret_Assign___Pb____Pb__node__Pe___Type__Pe___Arg___Pb__node__Pe___Type_Arg(&element_str,__Pb__node__Pe___Type_Ret_Add___Pb__node__Pe___Type_Arg_Ui_Arg(array_str,index)) , element = element_str.__Pb__node__Pe___Type::ptr)));
    printf("%d\n",( *__Pb__Base__Pe___Ret_Deref___Pb__Base__Pe___Type_Arg(__Pb__Base__Pe___Type_Ret_create_struct___Pb__Base__Pe___Arg_UL_Arg(__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(element,(reinterpret_cast < unsigned long long  >  ((&element))))) -> node::base_ptr,(reinterpret_cast < unsigned long long  >  ((&__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(element,(reinterpret_cast < unsigned long long  >  ((&element))))) -> node::base_ptr)))))). get_var1 ());
  }
}
#endif

void fn4_ext(struct __Pb__node__Pe___Type head_str)
{
  (v_Ret_create_entry_UL_Arg_UL_Arg((reinterpret_cast < unsigned long long  >  ((&head_str.__Pb__node__Pe___Type::ptr))),head_str.__Pb__node__Pe___Type::addr) , head_str.__Pb__node__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&head_str.__Pb__node__Pe___Type::ptr))));
  printf("fn4_ext: Printing linked list\n");
  unsigned int index = 0U;
  struct node *start;
  struct __Pb__node__Pe___Type start_str;
  ((start_str.__Pb__node__Pe___Type::ptr = start , start_str.__Pb__node__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&start)))) , ((__Pb__node__Pe___Type_Ret_Assign___Pb____Pb__node__Pe___Type__Pe___Arg___Pb__node__Pe___Type_Arg(&start_str,head_str) , start = start_str.__Pb__node__Pe___Type::ptr)));
  while(b_Ret_NotEqual___Pb__node__Pe___Type_Arg___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(start,(reinterpret_cast < unsigned long long  >  ((&start)))),__Pb__node__Pe___Type_Ret_Cast_i_Arg(0))){
    printf("%d: %d\n",++index,__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(start,(reinterpret_cast < unsigned long long  >  ((&start))))) -> node::node_ctr);
    struct __Pb__node__Pe___Type __Pb__node__Pe___Type_Var_ovl_6;
    (((__Pb__node__Pe___Type_Var_ovl_6 = __Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(start,(reinterpret_cast < unsigned long long  >  ((&start)))) , __Pb__node__Pe___Type_Ret_Assign___Pb____Pb__node__Pe___Type__Pe___Arg___Pb__node__Pe___Type_Arg(&__Pb__node__Pe___Type_Var_ovl_6,__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(start,(reinterpret_cast < unsigned long long  >  ((&start))))) -> node::next,(reinterpret_cast < unsigned long long  >  ((&__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(start,(reinterpret_cast < unsigned long long  >  ((&start))))) -> node::next)))))) ,  *(reinterpret_cast < struct node ** >  (__Pb__node__Pe___Type_Var_ovl_6.__Pb__node__Pe___Type::addr)) = __Pb__node__Pe___Type_Var_ovl_6.__Pb__node__Pe___Type::ptr) , __Pb__node__Pe___Type_Var_ovl_6);
  };
  printf("Done with linked list\n");
}
#if 1

void fn3_ext(struct __Pb__node__Pe___Type node_array_str)
{
  (v_Ret_create_entry_UL_Arg_UL_Arg((reinterpret_cast < unsigned long long  >  ((&node_array_str.__Pb__node__Pe___Type::ptr))),node_array_str.__Pb__node__Pe___Type::addr) , node_array_str.__Pb__node__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&node_array_str.__Pb__node__Pe___Type::ptr))));
  printf("fn3_ext: Printing array\n");
  for (unsigned int index = 0U; index < 10U; index++) {
    printf("%d:%d\n",index,( *__Pb__Base__Pe___Ret_Deref___Pb__Base__Pe___Type_Arg(__Pb__Base__Pe___Type_Ret_create_struct___Pb__Base__Pe___Arg_UL_Arg(( *__Pb__node__Pe___Ret_PntrArrRef___Pb__node__Pe___Type_Arg_Ui_Arg(node_array_str,index)).node::base_ptr,(reinterpret_cast < unsigned long long  >  ((&( *__Pb__node__Pe___Ret_PntrArrRef___Pb__node__Pe___Type_Arg_Ui_Arg(node_array_str,index)).node::base_ptr)))))). get_var1 ());
  }
  printf("Done with array\n");
}
#endif

int main()
{
  StartClock();
  int *ptr;
  struct __Pb__i__Pe___Type ptr_str;
  ((ptr_str.__Pb__i__Pe___Type::ptr = ptr , ptr_str.__Pb__i__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&ptr)))) , ((__Pb__i__Pe___Type_Ret_Assign___Pb____Pb__i__Pe___Type__Pe___Arg___Pb__i__Pe___Type_Arg(&ptr_str,__Pb__i__Pe___Type_Ret_Cast___Pb__v__Pe___Type_Arg(__Pb__v__Pe___Type_Ret_malloc_overload_Ul_Arg(400UL))) , ptr = ptr_str.__Pb__i__Pe___Type::ptr)));
  int *ptr2;
  struct __Pb__i__Pe___Type ptr2_str;
  ((ptr2_str.__Pb__i__Pe___Type::ptr = ptr2 , ptr2_str.__Pb__i__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&ptr2)))) , ((__Pb__i__Pe___Type_Ret_Assign___Pb____Pb__i__Pe___Type__Pe___Arg___Pb__i__Pe___Type_Arg(&ptr2_str,__Pb__i__Pe___Type_Ret_Cast___Pb__v__Pe___Type_Arg(__Pb__v__Pe___Type_Ret_malloc_overload_Ul_Arg(40UL))) , ptr2 = ptr2_str.__Pb__i__Pe___Type::ptr)));
  class Base base_obj;
//    class Base* base_ptr = new class Base;
  class Base *base_ptr;
  struct __Pb__Base__Pe___Type base_ptr_str;
  ((base_ptr_str.__Pb__Base__Pe___Type::ptr = base_ptr , base_ptr_str.__Pb__Base__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&base_ptr)))) , ((__Pb__Base__Pe___Type_Ret_Assign___Pb____Pb__Base__Pe___Type__Pe___Arg___Pb__Base__Pe___Type_Arg(&base_ptr_str,__Pb__Base__Pe___Type_Ret_Cast___Pb__v__Pe___Type_Arg(__Pb__v__Pe___Type_Ret_malloc_overload_Ul_Arg(64UL))) , base_ptr = base_ptr_str.__Pb__Base__Pe___Type::ptr)));
  __Pb__Base__Pe___Ret_Deref___Pb__Base__Pe___Type_Arg(__Pb__Base__Pe___Type_Ret_create_struct___Pb__Base__Pe___Arg_UL_Arg(base_ptr,(reinterpret_cast < unsigned long long  >  ((&base_ptr))))) ->  print ();
  class Base *base_ptr2;
  struct __Pb__Base__Pe___Type base_ptr2_str;
  ((base_ptr2_str.__Pb__Base__Pe___Type::ptr = base_ptr2 , base_ptr2_str.__Pb__Base__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&base_ptr2)))) , ((__Pb__Base__Pe___Type_Ret_Assign___Pb____Pb__Base__Pe___Type__Pe___Arg___Pb__Base__Pe___Type_Arg(&base_ptr2_str,__Pb__Base__Pe___Type_Ret_create_struct___Pb__Base__Pe___Arg_UL_Arg(base_ptr,(reinterpret_cast < unsigned long long  >  ((&base_ptr))))) , base_ptr2 = base_ptr2_str.__Pb__Base__Pe___Type::ptr)));
  __Pb__Base__Pe___Ret_Deref___Pb__Base__Pe___Type_Arg(__Pb__Base__Pe___Type_Ret_create_struct___Pb__Base__Pe___Arg_UL_Arg(base_ptr,(reinterpret_cast < unsigned long long  >  ((&base_ptr))))) ->  print ();
  class Derived1 der1_obj;
  struct __Pb__Base__Pe___Type __Pb__Base__Pe___Type_Var_ovl_7;
  (((__Pb__Base__Pe___Type_Var_ovl_7 = __Pb__Base__Pe___Type_Ret_create_struct___Pb__Base__Pe___Arg_UL_Arg(base_ptr,(reinterpret_cast < unsigned long long  >  ((&base_ptr)))) , __Pb__Base__Pe___Type_Ret_Assign___Pb____Pb__Base__Pe___Type__Pe___Arg___Pb__Base__Pe___Type_Arg(&__Pb__Base__Pe___Type_Var_ovl_7,__Pb__Base__Pe___Type_Ret_Cast___Pb__Derived1__Pe___Type_Arg(__Pb__Derived1__Pe___Type_Ret_AddressOf_UL_Arg_Ui_Arg((reinterpret_cast < unsigned long long  >  ((&der1_obj))),sizeof(der1_obj))))) ,  *(reinterpret_cast < class Base ** >  (__Pb__Base__Pe___Type_Var_ovl_7.__Pb__Base__Pe___Type::addr)) = __Pb__Base__Pe___Type_Var_ovl_7.__Pb__Base__Pe___Type::ptr) , __Pb__Base__Pe___Type_Var_ovl_7);
  ( *__Pb__Derived1__Pe___Ret_Deref___Pb__Derived1__Pe___Type_Arg(__Pb__Derived1__Pe___Type_Ret_Cast___Pb__Base__Pe___Type_Arg(__Pb__Base__Pe___Type_Ret_create_struct___Pb__Base__Pe___Arg_UL_Arg(base_ptr,(reinterpret_cast < unsigned long long  >  ((&base_ptr))))))). print ();
//class Derived2* der2_ptr = new class Derived2;
  class Derived2 *der2_ptr;
  struct __Pb__Derived2__Pe___Type der2_ptr_str;
  ((der2_ptr_str.__Pb__Derived2__Pe___Type::ptr = der2_ptr , der2_ptr_str.__Pb__Derived2__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&der2_ptr)))) , ((__Pb__Derived2__Pe___Type_Ret_Assign___Pb____Pb__Derived2__Pe___Type__Pe___Arg___Pb__Derived2__Pe___Type_Arg(&der2_ptr_str,__Pb__Derived2__Pe___Type_Ret_Cast___Pb__v__Pe___Type_Arg(__Pb__v__Pe___Type_Ret_malloc_overload_Ul_Arg(184UL))) , der2_ptr = der2_ptr_str.__Pb__Derived2__Pe___Type::ptr)));
  struct __Pb__Base__Pe___Type __Pb__Base__Pe___Type_Var_ovl_8;
  (((__Pb__Base__Pe___Type_Var_ovl_8 = __Pb__Base__Pe___Type_Ret_create_struct___Pb__Base__Pe___Arg_UL_Arg(base_ptr,(reinterpret_cast < unsigned long long  >  ((&base_ptr)))) , __Pb__Base__Pe___Type_Ret_Assign___Pb____Pb__Base__Pe___Type__Pe___Arg___Pb__Base__Pe___Type_Arg(&__Pb__Base__Pe___Type_Var_ovl_8,__Pb__Base__Pe___Type_Ret_Cast___Pb__Derived1__Pe___Type_Arg(__Pb__Derived1__Pe___Type_Ret_Cast___Pb__Derived2__Pe___Type_Arg(__Pb__Derived2__Pe___Type_Ret_create_struct___Pb__Derived2__Pe___Arg_UL_Arg(der2_ptr,(reinterpret_cast < unsigned long long  >  ((&der2_ptr)))))))) ,  *(reinterpret_cast < class Base ** >  (__Pb__Base__Pe___Type_Var_ovl_8.__Pb__Base__Pe___Type::addr)) = __Pb__Base__Pe___Type_Var_ovl_8.__Pb__Base__Pe___Type::ptr) , __Pb__Base__Pe___Type_Var_ovl_8);
  ( *__Pb__Derived2__Pe___Ret_Deref___Pb__Derived2__Pe___Type_Arg(__Pb__Derived2__Pe___Type_Ret_Cast___Pb__Base__Pe___Type_Arg(__Pb__Base__Pe___Type_Ret_create_struct___Pb__Base__Pe___Arg_UL_Arg(base_ptr,(reinterpret_cast < unsigned long long  >  ((&base_ptr))))))). print ();
  struct __Pb__Derived2__Pe___Type __Pb__Derived2__Pe___Type_Var_ovl_9;
  (((__Pb__Derived2__Pe___Type_Var_ovl_9 = __Pb__Derived2__Pe___Type_Ret_create_struct___Pb__Derived2__Pe___Arg_UL_Arg(der2_ptr,(reinterpret_cast < unsigned long long  >  ((&der2_ptr)))) , __Pb__Derived2__Pe___Type_Ret_Assign___Pb____Pb__Derived2__Pe___Type__Pe___Arg___Pb__Derived2__Pe___Type_Arg(&__Pb__Derived2__Pe___Type_Var_ovl_9,__Pb__Derived2__Pe___Type_Ret_Cast___Pb__Base__Pe___Type_Arg(::fn1(__Pb__i__Pe___Type_Ret_create_struct___Pb__i__Pe___Arg_UL_Arg(ptr,(reinterpret_cast < unsigned long long  >  ((&ptr)))),'a',__Pb__f__Pe___Type_Ret_Cast___Pb__i__Pe___Type_Arg(__Pb__i__Pe___Type_Ret_create_struct___Pb__i__Pe___Arg_UL_Arg(ptr2,(reinterpret_cast < unsigned long long  >  ((&ptr2))))),__Pb__Derived2__Pe___Type_Ret_create_struct___Pb__Derived2__Pe___Arg_UL_Arg(der2_ptr,(reinterpret_cast < unsigned long long  >  ((&der2_ptr)))),(base_obj))))) ,  *(reinterpret_cast < class Derived2 ** >  (__Pb__Derived2__Pe___Type_Var_ovl_9.__Pb__Derived2__Pe___Type::addr)) = __Pb__Derived2__Pe___Type_Var_ovl_9.__Pb__Derived2__Pe___Type::ptr) , __Pb__Derived2__Pe___Type_Var_ovl_9);
  int *start_ptr;
  struct __Pb__i__Pe___Type start_ptr_str;
  ((start_ptr_str.__Pb__i__Pe___Type::ptr = start_ptr , start_ptr_str.__Pb__i__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&start_ptr)))) , ((__Pb__i__Pe___Type_Ret_Assign___Pb____Pb__i__Pe___Type__Pe___Arg___Pb__i__Pe___Type_Arg(&start_ptr_str,__Pb__i__Pe___Type_Ret_create_struct___Pb__i__Pe___Arg_UL_Arg(ptr,(reinterpret_cast < unsigned long long  >  ((&ptr))))) , start_ptr = start_ptr_str.__Pb__i__Pe___Type::ptr)));
  int *start_ptr2;
  struct __Pb__i__Pe___Type start_ptr2_str;
  ((start_ptr2_str.__Pb__i__Pe___Type::ptr = start_ptr2 , start_ptr2_str.__Pb__i__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&start_ptr2)))) , ((__Pb__i__Pe___Type_Ret_Assign___Pb____Pb__i__Pe___Type__Pe___Arg___Pb__i__Pe___Type_Arg(&start_ptr2_str,__Pb__i__Pe___Type_Ret_create_struct___Pb__i__Pe___Arg_UL_Arg(ptr2,(reinterpret_cast < unsigned long long  >  ((&ptr2))))) , start_ptr2 = start_ptr2_str.__Pb__i__Pe___Type::ptr)));
// Crossing the boundary of ptr. The condition should
// be less than, not less than or equal to
// ptr[PTR_SIZE] is an out-of-bounds access
  for (int index = 0; index <= 101; index++) {
     *__Pb__i__Pe___Ret_Deref___Pb__i__Pe___Type_Arg(__Pb__i__Pe___Type_Ret_create_struct___Pb__i__Pe___Arg_UL_Arg(ptr,(reinterpret_cast < unsigned long long  >  ((&ptr))))) = index;
    struct __Pb__i__Pe___Type __Pb__i__Pe___Type_Var_ovl_10;
    (((__Pb__i__Pe___Type_Var_ovl_10 = __Pb__i__Pe___Type_Ret_create_struct___Pb__i__Pe___Arg_UL_Arg(ptr,(reinterpret_cast < unsigned long long  >  ((&ptr)))) , __Pb__i__Pe___Type_Ret_Increment___Pb____Pb__i__Pe___Type__Pe___Arg(&__Pb__i__Pe___Type_Var_ovl_10)) ,  *(reinterpret_cast < int ** >  (__Pb__i__Pe___Type_Var_ovl_10.__Pb__i__Pe___Type::addr)) = __Pb__i__Pe___Type_Var_ovl_10.__Pb__i__Pe___Type::ptr) , __Pb__i__Pe___Type_Var_ovl_10);
  }
// Resetting ptr to start_ptr, so that it points to the beginning
// of the allocation
  struct __Pb__i__Pe___Type __Pb__i__Pe___Type_Var_ovl_11;
  (((__Pb__i__Pe___Type_Var_ovl_11 = __Pb__i__Pe___Type_Ret_create_struct___Pb__i__Pe___Arg_UL_Arg(ptr,(reinterpret_cast < unsigned long long  >  ((&ptr)))) , __Pb__i__Pe___Type_Ret_Assign___Pb____Pb__i__Pe___Type__Pe___Arg___Pb__i__Pe___Type_Arg(&__Pb__i__Pe___Type_Var_ovl_11,__Pb__i__Pe___Type_Ret_create_struct___Pb__i__Pe___Arg_UL_Arg(start_ptr,(reinterpret_cast < unsigned long long  >  ((&start_ptr)))))) ,  *(reinterpret_cast < int ** >  (__Pb__i__Pe___Type_Var_ovl_11.__Pb__i__Pe___Type::addr)) = __Pb__i__Pe___Type_Var_ovl_11.__Pb__i__Pe___Type::ptr) , __Pb__i__Pe___Type_Var_ovl_11);
// Printing what we wrote above
  for (int index = 0; index <= 101; index++) {
    printf("ptr[%d]=%d\n",index, *__Pb__i__Pe___Ret_Deref___Pb__i__Pe___Type_Arg(__Pb__i__Pe___Type_Ret_create_struct___Pb__i__Pe___Arg_UL_Arg(ptr,(reinterpret_cast < unsigned long long  >  ((&ptr))))));
    struct __Pb__i__Pe___Type __Pb__i__Pe___Type_Var_ovl_12;
    (((__Pb__i__Pe___Type_Var_ovl_12 = __Pb__i__Pe___Type_Ret_create_struct___Pb__i__Pe___Arg_UL_Arg(ptr,(reinterpret_cast < unsigned long long  >  ((&ptr)))) , __Pb__i__Pe___Type_Ret_Increment___Pb____Pb__i__Pe___Type__Pe___Arg(&__Pb__i__Pe___Type_Var_ovl_12)) ,  *(reinterpret_cast < int ** >  (__Pb__i__Pe___Type_Var_ovl_12.__Pb__i__Pe___Type::addr)) = __Pb__i__Pe___Type_Var_ovl_12.__Pb__i__Pe___Type::ptr) , __Pb__i__Pe___Type_Var_ovl_12);
  }
  printf("Linked list\n");
  printf("Head\n");
// Linked list traversal
//struct node* head = new struct node;
  struct node *head;
  struct __Pb__node__Pe___Type head_str;
  ((head_str.__Pb__node__Pe___Type::ptr = head , head_str.__Pb__node__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&head)))) , ((__Pb__node__Pe___Type_Ret_Assign___Pb____Pb__node__Pe___Type__Pe___Arg___Pb__node__Pe___Type_Arg(&head_str,__Pb__node__Pe___Type_Ret_Cast___Pb__v__Pe___Type_Arg(__Pb__v__Pe___Type_Ret_malloc_overload_Ul_Arg(32UL))) , head = head_str.__Pb__node__Pe___Type::ptr)));
  struct __Pb__Base__Pe___Type __Pb__Base__Pe___Type_Var_ovl_13;
  (((__Pb__Base__Pe___Type_Var_ovl_13 = __Pb__Base__Pe___Type_Ret_create_struct___Pb__Base__Pe___Arg_UL_Arg(__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(head,(reinterpret_cast < unsigned long long  >  ((&head))))) -> node::base_ptr,(reinterpret_cast < unsigned long long  >  ((&__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(head,(reinterpret_cast < unsigned long long  >  ((&head))))) -> node::base_ptr)))) , __Pb__Base__Pe___Type_Ret_Assign___Pb____Pb__Base__Pe___Type__Pe___Arg___Pb__Base__Pe___Type_Arg(&__Pb__Base__Pe___Type_Var_ovl_13,__Pb__Base__Pe___Type_Ret_Cast___Pb__v__Pe___Type_Arg(__Pb__v__Pe___Type_Ret_malloc_overload_Ul_Arg(80UL)))) ,  *(reinterpret_cast < class Base ** >  (__Pb__Base__Pe___Type_Var_ovl_13.__Pb__Base__Pe___Type::addr)) = __Pb__Base__Pe___Type_Var_ovl_13.__Pb__Base__Pe___Type::ptr) , __Pb__Base__Pe___Type_Var_ovl_13);
  __Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(head,(reinterpret_cast < unsigned long long  >  ((&head))))) -> node::node_ctr = 0U;
  struct __Pb__node__Pe___Type __Pb__node__Pe___Type_Var_ovl_14;
  (((__Pb__node__Pe___Type_Var_ovl_14 = __Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(head,(reinterpret_cast < unsigned long long  >  ((&head))))) -> node::next,(reinterpret_cast < unsigned long long  >  ((&__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(head,(reinterpret_cast < unsigned long long  >  ((&head))))) -> node::next)))) , __Pb__node__Pe___Type_Ret_Assign___Pb____Pb__node__Pe___Type__Pe___Arg___Pb__node__Pe___Type_Arg(&__Pb__node__Pe___Type_Var_ovl_14,__Pb__node__Pe___Type_Ret_Cast_i_Arg(0))) ,  *(reinterpret_cast < struct node ** >  (__Pb__node__Pe___Type_Var_ovl_14.__Pb__node__Pe___Type::addr)) = __Pb__node__Pe___Type_Var_ovl_14.__Pb__node__Pe___Type::ptr) , __Pb__node__Pe___Type_Var_ovl_14);
  struct __Pb__node__Pe___Type __Pb__node__Pe___Type_Var_ovl_15;
  (((__Pb__node__Pe___Type_Var_ovl_15 = __Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(head,(reinterpret_cast < unsigned long long  >  ((&head))))) -> node::prev,(reinterpret_cast < unsigned long long  >  ((&__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(head,(reinterpret_cast < unsigned long long  >  ((&head))))) -> node::prev)))) , __Pb__node__Pe___Type_Ret_Assign___Pb____Pb__node__Pe___Type__Pe___Arg___Pb__node__Pe___Type_Arg(&__Pb__node__Pe___Type_Var_ovl_15,__Pb__node__Pe___Type_Ret_Cast_i_Arg(0))) ,  *(reinterpret_cast < struct node ** >  (__Pb__node__Pe___Type_Var_ovl_15.__Pb__node__Pe___Type::addr)) = __Pb__node__Pe___Type_Var_ovl_15.__Pb__node__Pe___Type::ptr) , __Pb__node__Pe___Type_Var_ovl_15);
  printf("Insert Node\n");
  struct node *new_node;
  struct __Pb__node__Pe___Type new_node_str;
  ((new_node_str.__Pb__node__Pe___Type::ptr = new_node , new_node_str.__Pb__node__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&new_node)))) , ((__Pb__node__Pe___Type_Ret_Assign___Pb____Pb__node__Pe___Type__Pe___Arg___Pb__node__Pe___Type_Arg(&new_node_str,::insert_node(__Pb__Base__Pe___Type_Ret_Cast___Pb__v__Pe___Type_Arg(__Pb__v__Pe___Type_Ret_malloc_overload_Ul_Arg(184UL)),__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(head,(reinterpret_cast < unsigned long long  >  ((&head)))))) , new_node = new_node_str.__Pb__node__Pe___Type::ptr)));
  struct node *prev_node;
  struct __Pb__node__Pe___Type prev_node_str;
  ((prev_node_str.__Pb__node__Pe___Type::ptr = prev_node , prev_node_str.__Pb__node__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&prev_node)))) , ((__Pb__node__Pe___Type_Ret_Assign___Pb____Pb__node__Pe___Type__Pe___Arg___Pb__node__Pe___Type_Arg(&prev_node_str,__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(new_node,(reinterpret_cast < unsigned long long  >  ((&new_node))))) , prev_node = prev_node_str.__Pb__node__Pe___Type::ptr)));
  printf("Insert Node Loop\n");
// Create a linked list of size LINKED_LIST_SIZE -- already has two nodes -- so total size
// would be LINKED_LIST_SIZE + 2
  for (unsigned int index = 0U; index < 10U; index++) {
    class Base *temp;
    struct __Pb__Base__Pe___Type temp_str;
    ((temp_str.__Pb__Base__Pe___Type::ptr = temp , temp_str.__Pb__Base__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&temp)))) , ((__Pb__Base__Pe___Type_Ret_Assign___Pb____Pb__Base__Pe___Type__Pe___Arg___Pb__Base__Pe___Type_Arg(&temp_str,__Pb__Base__Pe___Type_Ret_Cast___Pb__v__Pe___Type_Arg(__Pb__v__Pe___Type_Ret_malloc_overload_Ul_Arg(80UL))) , temp = temp_str.__Pb__Base__Pe___Type::ptr)));
    printf("sizeof(temp): %u\n",64ULL);
    struct __Pb__node__Pe___Type __Pb__node__Pe___Type_Var_ovl_16;
    (((__Pb__node__Pe___Type_Var_ovl_16 = __Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(new_node,(reinterpret_cast < unsigned long long  >  ((&new_node)))) , __Pb__node__Pe___Type_Ret_Assign___Pb____Pb__node__Pe___Type__Pe___Arg___Pb__node__Pe___Type_Arg(&__Pb__node__Pe___Type_Var_ovl_16,::insert_node(__Pb__Base__Pe___Type_Ret_create_struct___Pb__Base__Pe___Arg_UL_Arg(temp,(reinterpret_cast < unsigned long long  >  ((&temp)))),__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(prev_node,(reinterpret_cast < unsigned long long  >  ((&prev_node))))))) ,  *(reinterpret_cast < struct node ** >  (__Pb__node__Pe___Type_Var_ovl_16.__Pb__node__Pe___Type::addr)) = __Pb__node__Pe___Type_Var_ovl_16.__Pb__node__Pe___Type::ptr) , __Pb__node__Pe___Type_Var_ovl_16);
        #if 0
        #endif
    struct __Pb__node__Pe___Type __Pb__node__Pe___Type_Var_ovl_17;
    (((__Pb__node__Pe___Type_Var_ovl_17 = __Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(prev_node,(reinterpret_cast < unsigned long long  >  ((&prev_node)))) , __Pb__node__Pe___Type_Ret_Assign___Pb____Pb__node__Pe___Type__Pe___Arg___Pb__node__Pe___Type_Arg(&__Pb__node__Pe___Type_Var_ovl_17,__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(new_node,(reinterpret_cast < unsigned long long  >  ((&new_node)))))) ,  *(reinterpret_cast < struct node ** >  (__Pb__node__Pe___Type_Var_ovl_17.__Pb__node__Pe___Type::addr)) = __Pb__node__Pe___Type_Var_ovl_17.__Pb__node__Pe___Type::ptr) , __Pb__node__Pe___Type_Var_ovl_17);
  }
// prev_node now points to the last node
// lets delete from one before the last node
//struct node* to_delete = prev_node->prev;
  struct __Pb__node__Pe___Type __Pb__node__Pe___Type_Var_ovl_18;
  (((__Pb__node__Pe___Type_Var_ovl_18 = __Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(prev_node,(reinterpret_cast < unsigned long long  >  ((&prev_node)))) , __Pb__node__Pe___Type_Ret_Assign___Pb____Pb__node__Pe___Type__Pe___Arg___Pb__node__Pe___Type_Arg(&__Pb__node__Pe___Type_Var_ovl_18,__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(prev_node,(reinterpret_cast < unsigned long long  >  ((&prev_node))))) -> node::prev,(reinterpret_cast < unsigned long long  >  ((&__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(prev_node,(reinterpret_cast < unsigned long long  >  ((&prev_node))))) -> node::prev)))))) ,  *(reinterpret_cast < struct node ** >  (__Pb__node__Pe___Type_Var_ovl_18.__Pb__node__Pe___Type::addr)) = __Pb__node__Pe___Type_Var_ovl_18.__Pb__node__Pe___Type::ptr) , __Pb__node__Pe___Type_Var_ovl_18);
  fn4_ext(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(head,(reinterpret_cast < unsigned long long  >  ((&head)))));
  printf("Delete Node Loop\n");
  for (unsigned int index = 0U; index < 10U; index++) {
        #if 0
        #endif
    struct __Pb__node__Pe___Type __Pb__node__Pe___Type_Var_ovl_19;
    (((__Pb__node__Pe___Type_Var_ovl_19 = __Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(prev_node,(reinterpret_cast < unsigned long long  >  ((&prev_node)))) , __Pb__node__Pe___Type_Ret_Assign___Pb____Pb__node__Pe___Type__Pe___Arg___Pb__node__Pe___Type_Arg(&__Pb__node__Pe___Type_Var_ovl_19,::delete_node(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(prev_node,(reinterpret_cast < unsigned long long  >  ((&prev_node))))))) ,  *(reinterpret_cast < struct node ** >  (__Pb__node__Pe___Type_Var_ovl_19.__Pb__node__Pe___Type::addr)) = __Pb__node__Pe___Type_Var_ovl_19.__Pb__node__Pe___Type::ptr) , __Pb__node__Pe___Type_Var_ovl_19);
  }
  printf("Asserting\n");
// Should be left with two nodes
// Verifying that
    #if 0
  (__builtin_expect((!b_Ret_NotEqual___Pb__node__Pe___Type_Arg___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(head,(reinterpret_cast < unsigned long long  >  ((&head)))),__Pb__node__Pe___Type_Ret_Cast_i_Arg(0))),0L))?__assert_rtn(__Pb__Cc__Pe___Type_Ret_create_struct___Pb__Cc__Pe___Arg_UL_Arg_Ul_Arg(((const char *)__func__),(reinterpret_cast < unsigned long long  >  ((&__func__))),5UL),"/Users/vanka1/research/compilers/rose_public/rose_build/projects/RTC/pointer_example_class6.cpp",276,"head != NULL") : ((void )0);
  (__builtin_expect((!b_Ret_NotEqual___Pb__node__Pe___Type_Arg___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(head,(reinterpret_cast < unsigned long long  >  ((&head))))) -> node::next,(reinterpret_cast < unsigned long long  >  ((&__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(head,(reinterpret_cast < unsigned long long  >  ((&head))))) -> node::next)))),__Pb__node__Pe___Type_Ret_Cast_i_Arg(0))),0L))?__assert_rtn(__Pb__Cc__Pe___Type_Ret_create_struct___Pb__Cc__Pe___Arg_UL_Arg_Ul_Arg(((const char *)__func__),(reinterpret_cast < unsigned long long  >  ((&__func__))),5UL),"/Users/vanka1/research/compilers/rose_public/rose_build/projects/RTC/pointer_example_class6.cpp",277,"head->next != NULL") : ((void )0);
  (__builtin_expect((!b_Ret_Equality___Pb__node__Pe___Type_Arg___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(( *__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(head,(reinterpret_cast < unsigned long long  >  ((&head))))) -> node::next,(reinterpret_cast < unsigned long long  >  ((&__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(head,(reinterpret_cast < unsigned long long  >  ((&head))))) -> node::next)))))).node::next,(reinterpret_cast < unsigned long long  >  ((&( *__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(head,(reinterpret_cast < unsigned long long  >  ((&head))))) -> node::next,(reinterpret_cast < unsigned long long  >  ((&__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(head,(reinterpret_cast < unsigned long long  >  ((&head))))) -> node::next)))))).node::next)))),__Pb__node__Pe___Type_Ret_Cast_i_Arg(0))),0L))?__assert_rtn(__Pb__Cc__Pe___Type_Ret_create_struct___Pb__Cc__Pe___Arg_UL_Arg_Ul_Arg(((const char *)__func__),(reinterpret_cast < unsigned long long  >  ((&__func__))),5UL),"/Users/vanka1/research/compilers/rose_public/rose_build/projects/RTC/pointer_example_class6.cpp",278,"head->next->next == NULL") : ((void )0);
    #endif
  printf("Prints\n");
  printf("head: ctr: %d\n",__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(head,(reinterpret_cast < unsigned long long  >  ((&head))))) -> node::node_ctr);
  printf("next: ctr: %d\n",( *__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(head,(reinterpret_cast < unsigned long long  >  ((&head))))) -> node::next,(reinterpret_cast < unsigned long long  >  ((&__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(head,(reinterpret_cast < unsigned long long  >  ((&head))))) -> node::next)))))).node::node_ctr);
    #if 0
// Array ref
//base_index = (class Base*)malloc(sizeof(class Base));
    #endif
    #if 1
  struct node *node_array;
  struct __Pb__node__Pe___Type node_array_str;
  ((node_array_str.__Pb__node__Pe___Type::ptr = node_array , node_array_str.__Pb__node__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&node_array)))) , ((__Pb__node__Pe___Type_Ret_Assign___Pb____Pb__node__Pe___Type__Pe___Arg___Pb__node__Pe___Type_Arg(&node_array_str,__Pb__node__Pe___Type_Ret_Cast___Pb__v__Pe___Type_Arg(__Pb__v__Pe___Type_Ret_malloc_overload_Ul_Arg(80UL))) , node_array = node_array_str.__Pb__node__Pe___Type::ptr)));
  printf("Setting node array\n");
  for (unsigned int index = 0U; index < 10U; index++) {
    struct node *element;
    struct __Pb__node__Pe___Type element_str;
    ((element_str.__Pb__node__Pe___Type::ptr = element , element_str.__Pb__node__Pe___Type::addr = (reinterpret_cast < unsigned long long  >  ((&element)))) , ((__Pb__node__Pe___Type_Ret_Assign___Pb____Pb__node__Pe___Type__Pe___Arg___Pb__node__Pe___Type_Arg(&element_str,__Pb__node__Pe___Type_Ret_Add___Pb__node__Pe___Type_Arg_Ui_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(node_array,(reinterpret_cast < unsigned long long  >  ((&node_array)))),index)) , element = element_str.__Pb__node__Pe___Type::ptr)));
//element->base_ptr = new class Base;
    struct __Pb__Base__Pe___Type __Pb__Base__Pe___Type_Var_ovl_20;
    (((__Pb__Base__Pe___Type_Var_ovl_20 = __Pb__Base__Pe___Type_Ret_create_struct___Pb__Base__Pe___Arg_UL_Arg(__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(element,(reinterpret_cast < unsigned long long  >  ((&element))))) -> node::base_ptr,(reinterpret_cast < unsigned long long  >  ((&__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(element,(reinterpret_cast < unsigned long long  >  ((&element))))) -> node::base_ptr)))) , __Pb__Base__Pe___Type_Ret_Assign___Pb____Pb__Base__Pe___Type__Pe___Arg___Pb__Base__Pe___Type_Arg(&__Pb__Base__Pe___Type_Var_ovl_20,__Pb__Base__Pe___Type_Ret_Cast___Pb__v__Pe___Type_Arg(__Pb__v__Pe___Type_Ret_malloc_overload_Ul_Arg(64UL)))) ,  *(reinterpret_cast < class Base ** >  (__Pb__Base__Pe___Type_Var_ovl_20.__Pb__Base__Pe___Type::addr)) = __Pb__Base__Pe___Type_Var_ovl_20.__Pb__Base__Pe___Type::ptr) , __Pb__Base__Pe___Type_Var_ovl_20);
    ( *__Pb__Base__Pe___Ret_Deref___Pb__Base__Pe___Type_Arg(__Pb__Base__Pe___Type_Ret_create_struct___Pb__Base__Pe___Arg_UL_Arg(__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(element,(reinterpret_cast < unsigned long long  >  ((&element))))) -> node::base_ptr,(reinterpret_cast < unsigned long long  >  ((&__Pb__node__Pe___Ret_Deref___Pb__node__Pe___Type_Arg(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(element,(reinterpret_cast < unsigned long long  >  ((&element))))) -> node::base_ptr)))))). set_var1 (index);
  }
  printf("Printing node array\n");
  fn3_ext(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(node_array,(reinterpret_cast < unsigned long long  >  ((&node_array)))));
  fn3(__Pb__node__Pe___Type_Ret_create_struct___Pb__node__Pe___Arg_UL_Arg(node_array,(reinterpret_cast < unsigned long long  >  ((&node_array)))));
    #endif
  EndClock();
  return 1;
}
