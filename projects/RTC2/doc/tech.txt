Disjoint Individual Pointer Tracking

Every pointer, whether its of POD type, user-defined struct/class type, gets its own struct variable to track it.
The struct will contain a void double pointer (void**), and two void pointers (void*). The void** points to the 
original variable itself, and will be cast to the right type after the first dereference. So, it would be
something like: (unsigned int*)*(void**). 
Note that we do not remove the original variable itself. We simply create an additional variable to track it.
The reason why we use this struct, versus any other solution is pretty simple. The struct resides in the same
scope as the variable, and this ensures that it defines a scope at which the struct can be cleaned out. In many
cases, (i.e. stack variables), this would be done automatically, and hence the memory overhead would be 
kept small.

Now, when we call a function with the original pointer variable, we have two options:
1. change the prototype of the function to handle the struct variable in addition to the original pointer
2. Since the struct variable contains the original pointer, through the void**, we could only pass the struct
3. Not change the prototype itself, but pass the relevant structures in a stack. This stack would be populated
such that it can be popped based on the parameter order in the callee. This way, we could pass the struct
without making it a global variable -- however, this doesn't work in all cases. Case in point: data structures.

We couldn't possibly put/want to put every struct associated with a data structure on the stack, and hope to recover it properly
on the other side, since whole data structures are not typically passed as function parameters.

When dealing with data structures, more often than not, we will have know the original pointer, but not the 
struct associated with it. For example, in a linked list traversal, at each node, we simple go to the "next"
node by: next_node = node->next;
Now, we need to know the struct associated with the next_node. Since the data within each node might be a pointer
itself, in addition to the next pointer, we would need to do know the struct for that pointer so that we can
do array bounds checks on it. To accomplish this, we need a reverse map which can start from a pointer, and 
find its struct. Now, the crucial thing to ensure here is that the struct be available in the same scope as this
pointer. This might seem trivial, but I think it would be a little bit of a challenge to ensure it works correctly
every time. 

It might be worth investigating what exactly needs to be recorded for a data structure. Actual nodes
in a linked list, or entries in a hash map may not need to be tracked. In most cases, the checks on these
nodes would probably be as a NULL pointer deref or invalid pointer deref. Both of which are temporal, and not
spatial, checks. The challenge here, though, is the identification of the data structure itself. Once that is
done, it might be possible to limit the number of checks that are performed on it.

Lock-Key Implementation
In a lock-key implementation, a lock is associated with each memory location and/or allocation. The granularity
is crucial, and probably the downside of this implementation. In effect, each lock holds the most current 
allocation which has been assigned the current memory location. Each allocation is given a unique identifier which
is stored in the lock location. The allocation to which a pointer belongs to, is stored in the metadata for the
pointer, as a key. If the memory location is freed, the lock value (value stored at the lock location) changes
to zero. If the memory location is reassigned to another allocation, the new unique id of that allocation is stored
as lock value. Each pointer's key specifies the allocation that the pointer corresponds to. If the lock value is
zero (it has been deallocated), or some other value, not equal to the pointer's key, then the memory pointed to
by the pointer is not the one it assumes. The location has either been freed (lock value = 0), or has been 
reallocated (lock value != key). 

It is possible to keep a counter for each of the locks, to see how many pointers point to the lock. This counter
has to be within the lock as well, since concurrent pointer assignments might change the lock value simultaneously.

The trick, as I see it, is to figure the right granularity for the lock, and have an efficient way of assigning
multiple locks to a single pointer (since the pointer could be reading/writing multiple locations based on the 
casting). For this reason, a central repo of the lock associated with each location has to be maintained.

The great thing about locks is their reusability. The moment a memory location is freed, the lock associated with
it can be re-used. The old pointers pointing to the lock will simply see a value which doesn't match their key.

Tying both the concepts
Each pointer has a struct variable which stores the lower and upper bounds for the buffer it points to. These
bounds provide the necessary info for spatial checks.
The struct also contains a reference to a lock which contains up-to-date information regarding the memory state.
This lock is used to provide temporal checks. 

In order to find the struct from the pointer, a mapping based on the address of the pointer is required.
In order to figure out the actual locks which are useful to the current pointer, the lower and upper bounds
can be used to find the relevant locks. Finding these locks, given the lower and upper bounds, requires
another mapping. On a free, the locks associated with a pointer are set to zero, and the lock is 
added to the free list. On a malloc, we need to
find the locks in the free list -- this free list is, of course, guarded by locks!

One problem with this heavy reliance on locks is the synchronization overhead, which might increase as the 
contention increases. But it could be argued that multiple pointers accessing the same memory location is,
on a regular basis, is probably synchronized in the first place, and
is bound to end up with some bugs.


In the big picture, we will be using disjoint fat pointers --- if that makes sense. 
This will give the advantage of disjoint structure, while maintaining most of the advantages
of the fat pointer implementation -- scope level info is implicit and clean up is automatic.

The disjoint struct for each pointer would contain the following:
	1. void** - which points to the original pointer - Maintain memory layout
	2. void*  - which points to the lower bound of the current buffer - Spatial Check
	3. void*  - which points to the upper bound of the current buffer - Spatial Check
	4. void*  - lock location pointer to check if the buffer is valid - Temporal Check
	5. uint64_t - the unique id of the buffer that this corresponds to - Temporal Check

Whenever a new variable is created, a corresponding struct variable is also created.
A mapping between the two -- from new variable to its struct -- is made. The reverse mapping
is not necessary since the struct has a pointer to the original variable.
The struct is initialized as follows:
	1. void** - its a pointer to the variable (since the variable itself is a pointer, this is a double pointer)
	2. void*  - the lower bound of the buffer pointed to by the variable - either from malloc, or copy from RHS
	3. void*  - the upper bound of the buffer pointed to by the variable - either from malloc, or copy from RHS
	4. void*  - lock location, assigned to the malloc, or copy from RHS
	5. uint64_t - value at lock location -- this is the unique ID for the buffer that this pointer belongs to

Important to note here is that this needs to be for all internal pointers, in addition to the top-level, in 
a class/struct variable declaration. So, for example, given that we have the following structures:

	struct IS {
		int* local;
	};

	class Base {
		int *ptr;
		float* ptr2;
		struct IS *ptr3;
	};

	// The struct for each pointer
	struct VoidStr {
		void** ptr2ptr;
		void*  L;
		void*  H;
		void* lock_loc;
		uint64_t key;
	};

a declaration such as:

	class Base *A = new class Base;

would be transformed to
	class Base *A = new class Base;
	struct VoidStr A_structed;
	create_entry(A, A_structed);
	A_structed.ptr2ptr = &A;
	A_structed.L = A;
	A_structed.H = A + sizeof(Base);
	A_structed.lock_loc = find_lock(A);
	A_structed.key = *lock_loc;

	// Now, we have to create new variables for each of the internal pointer variables
	// in A, recursively
	// Since they haven't been initialized in the constructor above, we can't initialize
	struct VoidStr A_ptr_structed; 
	create_entry(A->ptr, A_structed); // This may not be a valid access since ptr could be private
	struct VoidStr A_ptr2_structed;
	create_entry(A->ptr2, A_structed);// This may not be a valid access since ptr2 could be private
	struct VoidStr A_ptr3_structed;
	create_entry(A->ptr3, A_structed);// This may not be a valid access since ptr3 could be private
	// Now for the pointer within the struct IS (linked through ptr3 in class Base)
	struct VoidStr A_ptr3_local_structed;
	create_entry(A->ptr3->local, A_structed);// This may not be a valid access since local could be private

We would need to traverse the constructor arguments, and find the right assignments, and
initialize the pointer variables in the common case.

The create_entry may not work this way since the variable might be private and inaccessible from the 
current location. Moreover, it is possible that the variable is initialized through a constructor,
and now its essential that we get hold of that pointer and create an entry. This might need to be done
in the constructor itself -- and probably get a bit messy there

--------------------------------------

Do we need the void**? 
Since we retain the original variable, is there a need for having a pointer to that variable at all?
The need for the double pointer arises when we are looking for the pointer variable corresponding to
a particular struct. For now, it looks like this would not happen in any of the pointer checking
cases. For now, atleast, we'll not have the void double ptr within each of the struct, and 
perform checks prior to the pointer operation, and do the operation itself, on the original variable.


The implementation would be as follows:
1. Clone the procedures to create two different versions
	1. Version with original prototype and no changes - this is the original version of the procedure
	2. Cloned version is changed to include the structs in addition to the pointer variables
2. Use TopDownBottomUpProcessing to identify the nodes to instrument.
	1. TopDown pass is required to find those nodes which shouldn't be instrumented -- member variables
	in a class shouldn't be instrumented with their struct versions in place, because this would
	change the layout of the class. Pointer variables declared within functions should be instrumented.
	Since this distinction is based on the parent/enclosing scope of the variable -- a topdown 
	pass is necessary.
	2. BottomUp pass is required to find nodes, which would need to instrumented -- after taking into
	account the enclosing scope.


	
